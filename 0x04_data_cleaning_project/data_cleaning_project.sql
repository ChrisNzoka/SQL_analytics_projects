-- Data cleaning project

#1 create a new database(schema)
CREATE SCHEMA `world_layoffs`;

#2 Import data from the table tab by right clicking and selecting 'Table data import wizard'

#3 view the table
SELECT 
    *
FROM
    layoffs;

#4 create a staging area for the data(a duplicate)
-- first we create the table that looks exactly like what we have using "LIKE"
CREATE TABLE layoffs_staging LIKE layoffs;

-- then we insert the contents of layoffs into the layoff_staging
INSERT layoffs_staging
SELECT * FROM layoffs;

#5 Check for and remove duplicates
-- First we'll use the windows funtions row_number() and over() to give row numbers to the records
-- then, using CTEs and/or Subqueries, we can single out the duplicates over all the fields and remove them.

SELECT *,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
	FROM 
		world_layoffs.layoffs_staging;
-- The querry above arranges the records and assigns numbers > 1 to the duplicates

-- Next, to single out the duplicates, let's use subqueries --
select * from (
SELECT *,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
	FROM 
		world_layoffs.layoffs_staging
) AS duplicates
Where row_num > 1;

-- Alternatively, we can use CTEs --
with duplicate_cte AS
(
SELECT *,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) AS row_num
	FROM 
		world_layoffs.layoffs_staging
)
SELECT * FROM duplicate_cte WHERE row_num > 1;

-- Deleting rows --
/*
To delete a row, we will have to use a unique field value that makes it stand out.
Also, this unique value must be on a field existing in the original table and not an agregated field or column generated by code.
Thus, the following code will not delete our selected record as the field row_num is a generated column
*/
WITH DELETE_CTE AS 
(
SELECT *
FROM (
	SELECT *,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off,percentage_laid_off,`date`, stage, country, funds_raised_millions
			) AS row_num
	FROM 
		layoff_staging
) duplicates
WHERE 
	row_num > 1
)
DELETE
FROM DELETE_CTE
;
#Above, we put the subquery into a CTE to delete the records with row_num fields > 1 but it didn't work
-- one solution, which I think is a good one. Is to create a new column and add those row numbers in.
-- Then delete columns where row numbers are > 2


ALTER TABLE world_layoffs.layoff_staging ADD row_num INT;

SELECT 
    *
FROM
    layoff_staging;
-- Above, we just saw how to alter an existing table and insert a new field to it using ADD
-- For the case study, let's create a new staging table and add the field `row_num INT`
CREATE TABLE layoffs_staging2 (
`company` text,
`location`text,
`industry`text,
`total_laid_off` INT,
`percentage_laid_off` text,
`date` text,
`stage`text,
`country` text,
`funds_raised_millions` int,
`row_num` INT
);

# Now, let's insert our selection
INSERT INTO layoffs_staging2
SELECT *,
		ROW_NUMBER() OVER (
			PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions
			) AS row_num
	FROM 
		layoffs_staging;
-- let's check the input
select * from layoffs_staging2
WHERE row_num >= 2;

-- now that we have this we can delete rows were row_num is greater than 2
DELETE FROM layoffs_staging2
WHERE row_num > 1;

#6 Standardize the Data (spellings, typos, etc)


#7 Check for Null values and Blank cells (checking to see if we should populate it or leave it be)


#7 Remove irrelevant fields(columns) and records(rows)